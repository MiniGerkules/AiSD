#pragma once

#include <iostream>
#include "Queue.h"
#include "Stack.h"
#include "Node.h"
#include "Iterator.h"

class Binary_heap
{
private:
	// Class describing the breadth-first iterator
	class BFT_iterator : public Iterator
	{
	private:
		Queue queue;						// The queue to which we will add items
		Node* current;						// Current crawled item
	public:
		/*
			BFT_iterator class constructor
			Node* start -- binary heap root
		*/
		BFT_iterator(Node* start);

		//Destructor of the BFT_iterator class
		~BFT_iterator();

		// The method will know if there is a next item
		bool has_next() override;

		// Move to next item
		int next() override;
	};

	// A class describing a depth-first iterator
	class DFT_iterator : public Iterator
	{
	private:
		Stack stack;						// The stack to which we will add items
		Node* current;						// Current crawled item
	public:
		/*
			DFT_iterator class constructor
			Node* start -- binary heap root
		*/
		DFT_iterator(Node* start);

		//Destructor of the DFT_iterator class
		~DFT_iterator();

		// The method will know if there is a next item
		bool has_next() override;

		// Move to next item
		int next() override;
	};
	
	Node* Root;							// Root element
	size_t ID_last;						// ID of the last added item (not the key)

public:
	// Constructor of the Binary_heap class
	Binary_heap();

	// Destructor of the Binary_heap class
	~Binary_heap();

	// A function that returns the address of the root
	Node* address_of_the_root();

	/*
		Creating an iterator that implements breadth-first traversal methods
		Binary_heap* heap -- binary heap
	*/
	Iterator* create_bft_iterator();

	/*
		Creating an iterator that implements one of the depth-first traversal methods
		Binary_heap* heap -- binary heap
	*/
	Iterator* create_dft_iterator();

	/*
		The function return a breadth-first traversal
		Binary_heap* heap -- pointer to the heap in which we will perform breadth-first traversal
	*/
	void output_BFT();

	/*
		The function return a depth-first traversal
		Binary_heap* heap -- pointer to the heap in which we will perform depth-first traversal
	*/
	void output_DFT();
	
	/*
		The function checks whether there is an element in the tree with the passed key
		int key -- key of the desired element
	*/
	bool contains(int key);
	
	/*
		Adding an element to the tree by key (O(logN))
		int key -- key of the desired element
	*/
	void insert(int key);
	
	/*
		The function removes a tree element by key
		int key -- key of the desired element
	*/
	void remove(int key);

	/*
		A function that searches for the last entered element
		Node* current -- current tree element
		size_t ID -- ID of the element to search for
		size_t current_level -- the number of levels below the current element
	*/
	Node* search_by_ID(Node* current, size_t ID, size_t current_level);

	/*
		A function that searches for the last entered element
		Node* current -- current element of the binary heap
		int key -- search item key
	*/
	Node* search_by_key(Node* current, int key);
	
	/*
		Function sifts downwards
		Node* start -- the element from which we start sifting
	*/
	void siftDown(Node* start);
	
	/*
		The function implements sifting up
		Node* start -- the element from which we start sifting
	*/
	void siftUp(Node* start);

	// Function that prints the tree to the console
	void print_tree();

	/*
		Function that allocates memory for future tree elements
		Node* currnet -- an item to allocate memory for its descendants.
	*/
	void creator_of_new_elements(Node* current);

	/*
		The function frees memory from the elements of the binary heap
		Node* node_current -- address of the current element
	*/
	void tree_clearing(Node* node_current);
};

/*
	A function that determines the level at which a tree element is located
	size_t id -- ID of the element to search for
*/
size_t level_identifier(size_t id);

/*
	A function that counts the maximum number of elements for the current number of levels
	size_t level -- the last level of the current tree
*/
size_t element_counter(size_t level);

/*
	A function that calculates how many IDs must be subtracted from the old ID to go to the new tree
	size_t level -- the last level of the current tree
*/
size_t counter_of_unnecessary_items(size_t level);

/*
	Function that counts the number of elements at a level
	size_t level -- the level at which you want to count the number of items
*/
size_t size_of_level(size_t level);

/*
	User input
	string str -- string to output
*/
size_t input(std::string str);

/*
	Function that changes the values of two tree elements
	int* first -- the first number
	int* second -- the second number
*/
void my_swap(int* first, int* second);

// A function that delays the program and clears the console
void delay();
