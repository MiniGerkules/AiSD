#include "Prototypes.h"
#include "Queue.h"
#include "Stack.h"
#include "Node.h"
#include <iostream>
#include <stdexcept>
#include <math.h>

using namespace std;

//-----------------------------------------
//Main functions
//-----------------------------------------

/*
	Constructor of the Node class
	Node* previous -- pointer to previous item
	Node* right -- pointer to right child element
	Node* left -- pointer to left child element
	int key -- tree element value
*/
Node::Node(Node* parent, Node* right, Node* left, int key)
	: Parent(parent), Right(right), Left(left), Key(key)
{}

/*
	BFT_iterator class constructor
	Node* start -- binary heap root
*/
Binary_heap::BFT_iterator::BFT_iterator(Node* start)
{
	current = start;
	queue = new Queue;
	if (queue == NULL)
		throw out_of_range("Memory allocation error!");
	queue->push(start);
}

//Destructor of the BFT_iterator class
Binary_heap::BFT_iterator::~BFT_iterator()
{
	current = NULL;
	delete queue;
}


/*
	DFT_iterator class constructor
	Node* start -- binary heap root
*/
Binary_heap::DFT_iterator::DFT_iterator(Node* start)
{
	current = start;
	stack = new Stack;
	if (stack == NULL)
		throw out_of_range("Memory allocation error!");
	stack->push(start);
}

//Destructor of the DFT_iterator class
Binary_heap::DFT_iterator::~DFT_iterator()
{
	current = NULL;
	delete stack;
}

// Constructor of the Binary_heap class
Binary_heap::Binary_heap()
{
	ID_last = 0;
	Root = NULL;
}

// Destructor of the Binary_heap class
Binary_heap::~Binary_heap()
{
	if (Root != NULL)
		tree_clearing(Root);
}

// A function that returns the address of the root
Node* Binary_heap::address_of_the_root()
{
	return this->Root;
}

/*
	The function checks whether there is an element in the tree with the passed key
	int key -- key of the desired element
*/
bool Binary_heap::contains(int key)
{
	Node* sought = NULL;						// The element we are looking for

	if (key < Root->Key)
		throw out_of_range("Item doesn't exist!");

	sought = search_by_key(Root, key);
	if (sought->Key != key)
		throw out_of_range("Item doesn't exist!");

	return true;
}

/*
	Adding an element to the tree by key (O(logN))
	int key -- the index of the element
*/
void Binary_heap::insert(int key)
{
	Node* sought;										// The required free space to which we add a new element

	if (ID_last == 0)
	{
		if (Root == NULL)
		{
			Root = new Node(NULL, NULL, NULL, key);
			if (Root == NULL) throw out_of_range("Memory not allocated.");
			creator_of_new_elements(Root);
		}
		else
			creator_of_new_elements(Root);
	}
	else
	{
		sought = search_by_ID(Root, ID_last, level_identifier(ID_last));
		sought->Key = key;
		siftUp(sought);
		creator_of_new_elements(sought);
	}

	ID_last++;
}

/*
	The function removes a tree element by key
	int key -- key of the desired element
*/
void Binary_heap::remove(int key)
{
	Node* sought = NULL;						// The element we are looking for
	Node* last = NULL;							// Last element of the binary heap

	if (key < Root->Key)
		throw out_of_range("Item doesn't exist!");

	sought = search_by_key(Root, key);
	last = search_by_ID(Root, ID_last - 1, level_identifier(ID_last - 1));
	my_swap(&sought->Key, &last->Key);

	delete last->Left;
	last->Left = NULL;
	delete last->Right;
	last->Right = NULL;
	if (last != Root)
	{
		last->Key = INT_MIN;
		siftDown(sought);
	}
	else
	{
		delete last;
		Root = NULL;
	}

	ID_last--;
}

Iterator* Binary_heap::create_bft_iterator()
{
	BFT_iterator* iterator;

	if (Root == NULL)
		throw out_of_range("There are no elements in the binary heap!");

	iterator = new BFT_iterator(Root);
	return iterator;
}

// The method will know if there is a next item
bool Binary_heap::BFT_iterator::has_next()
{
	bool flag;									// The program's response as to whether the next item is
	
	if (!queue->is_empty())
		flag = true;
	else
		flag = false;

	return flag;
}

// Move to next item
int Binary_heap::BFT_iterator::next()
{
	if (has_next())
	{
		current = queue->pop();
		if (current->Left->Key != INT_MIN)
			queue->push(current->Left);
		if (current->Right->Key != INT_MIN)
			queue->push(current->Right);

		return current->Key;
	}
}

Iterator* Binary_heap::create_dft_iterator()
{
	DFT_iterator* iterator;

	if (Root == NULL)
		throw out_of_range("There are no elements in the binary heap!");

	iterator = new DFT_iterator(Root);
	return iterator;
}

// The method will know if there is a next item
bool Binary_heap::DFT_iterator::has_next()
{
	bool flag;									// The program's response as to whether the next item is

	if (!stack->is_empty())
		flag = true;
	else
		flag = false;

	return flag;
}

// Move to next item
int Binary_heap::DFT_iterator::next()
{
	int value;									// The value of the current item

	if (has_next())
	{
		if (current->Right->Key != INT_MIN)
			stack->push(current->Right);

		value = current->Key;

		if (current->Left->Key != INT_MIN)
			current = current->Left;
		else
			current = stack->pop();

		return value;
	}
}

//-----------------------------------------
//Secondary functions
//-----------------------------------------

/*
	A function that determines the level at which a tree element is located
	size_t id -- ID of the element to search for
*/
size_t level_identifier(size_t id)
{
	size_t number;								// Maximum number of elements for the current number of levels
	size_t level;								// The level at which the tree element is
	
	number = 1;
	level = 0;
	while (number < (id + 1))
	{
		level++;
		number += size_of_level(level);
	}

	return level;
}

/*
	A function that searches for the last entered element
	Node* current -- current tree element
	size_t ID -- ID of the element to search for
	size_t current_level -- the number of levels below the current element
*/
Node* Binary_heap::search_by_ID(Node* current, size_t ID, size_t current_level)
{
	size_t number_of_possible_elements;			// Maximum number of elements for the current number of levels
	size_t size;								// Last level size

	// ID -- the ordinal number of the binary heap element. For example
	/*
		The heap					The ID
		3							0
		4	7						1	2
		9							3

	*/

	if (ID != 0)
	{
		size = size_of_level(current_level);
		
		number_of_possible_elements = element_counter(current_level);

		if (ID < (number_of_possible_elements - size / 2))
		{
			current = current->Left;
			ID -= counter_of_unnecessary_items(current_level - 1);
		}
		else
		{
			current = current->Right;
			ID -= counter_of_unnecessary_items(current_level);
		}

		if (ID != 0)
			current = search_by_ID(current, ID, --current_level);
	}
	
	return current;
}

/*
	A function that searches for the last entered element
	Node* current -- current element of the binary heap
	int key -- search item key
*/
Node* Binary_heap::search_by_key(Node* current, int key)
{
	Node* transmitted = NULL;					// Storing the intermediate search result in the left subtree

	if (current->Key != key)
	{
		if ((current->Left->Key <= key) && (current->Left->Key != INT_MIN))
			transmitted = search_by_key(current->Left, key);
		
		if ((transmitted != NULL) && (transmitted->Key == key))
			current = transmitted;

		if ((current->Right->Key <= key) && (current->Right->Key != INT_MIN) && (current->Key != key))
			transmitted = search_by_key(current->Right, key);
		
		if ((transmitted != NULL) && (transmitted->Key == key))
			current = transmitted;
	}
	
	return current;
}

/*
	Function sifts downwards
	Node* start -- the element from which we start sifting
*/
void Binary_heap::siftDown(Node* start)
{
	Node* min = NULL;							// Minimum of start->Left->Key and start->Right->Key

	if ((start->Left->Key != INT_MIN) && (start->Right->Key == INT_MIN))
	{
		if (start->Key > start->Left->Key)
			my_swap(&start->Key, &start->Left->Key);
	}
	else if ((start->Left->Key != INT_MIN) && (start->Right->Key != INT_MIN))
	{
		if (start->Left->Key > start->Right->Key)
			min = start->Right;
		else
			min = start->Left;

		if (start->Key > min->Key)
		{
			my_swap(&start->Key, &min->Key);
			siftDown(min);
		}
	}
}

/*
	The function implements sifting up
	Node* start -- the element from which we start sifting
*/
void Binary_heap::siftUp(Node* start)
{
	if ((start->Parent != NULL) && (start->Key < start->Parent->Key))
	{
		my_swap(&start->Key, &start->Parent->Key);
		siftUp(start->Parent);
	}
}

/*
	The function outputs the breadth-first traversal
	Binary_heap* heap -- pointer to the heap in which we will perform breadth-first traversal
*/
void Binary_heap::output_BFT()
{
	Iterator* iterator;							// Breadth First Iterator

	iterator = create_bft_iterator();
	while (iterator->has_next())
		cout << iterator->next() << " ";

	delete iterator;
}

/*
	The function outputs the depth-first traversal
	Binary_heap* heap -- pointer to the heap in which we will perform depth-first traversal
*/
void Binary_heap::output_DFT()
{
	Iterator* iterator;							// Depth-first iterator

	iterator = create_dft_iterator();
	while (iterator->has_next())
		cout << iterator->next() << " ";

	delete iterator;
}

// Function that prints the tree to the console
void Binary_heap::print_tree()
{
	Iterator* iterator;							// Breadth First Iterator
	size_t level;								// The level of the output element
	size_t counter;								// Maximum number of elements on the current number of levels
	size_t i;									// For loop parameter

	iterator = create_bft_iterator();
	counter = 1;
	level = 0;
	i = 0;
	while (iterator->has_next())
	{
		if (i == counter)
		{
			counter += size_of_level(++level);
			cout << '\n' << endl;
		}
		cout << iterator->next() << '\t';
		i++;
	}	
	cout << '\n' << endl;

	delete iterator;
}

/*
	Function that allocates memory for future tree elements
	Node* currnet -- an item to allocate memory for its descendants.
*/
void Binary_heap::creator_of_new_elements(Node* current)
{
	current->Right = new Node(current, NULL, NULL, INT_MIN);
	if (current->Right == NULL)
	{
		throw out_of_range("Memory not allocated.");
	}

	current->Left = new Node(current, NULL, NULL, INT_MIN);
	if (current->Left == NULL)
	{
		delete current->Right;
		throw out_of_range("Memory not allocated.");
	}
}

/*
	The function frees memory from the elements of the binary heap
	Node* node_current -- address of the current element
*/
void Binary_heap::tree_clearing(Node* node_current)
{
	if (node_current->Left != NULL)
		tree_clearing(node_current->Left);
	if (node_current->Right != NULL)
		tree_clearing(node_current->Right);

	delete node_current;
}

/*
	A function that calculates how many IDs must be subtracted from the old ID to go to the new tree
	size_t level -- the last level of the current tree
*/
size_t element_counter(size_t level)
{
	size_t result;								// Number of IDs to be subtracted

	result = 1;
	while (level != 0)
		result += size_of_level(level--);

	return result;
}

/*
	A function that counts the maximum number of elements for the current number of levels
	size_t level -- the last level of the current tree
*/
size_t counter_of_unnecessary_items(size_t level)
{
	size_t result;								// Number of IDs to be subtracted

	result = 1;
	while (level != 0)
		result += size_of_level(level--) / 2;

	return result;
}

/*
	Function that counts the number of elements at a level
	size_t level -- the level at which you want to count the number of items
*/
size_t size_of_level(size_t level)
{
	size_t answer;								// Amount of elements
	size_t i;									// Foor loop parameter

	answer = 1;
	for (i = 0; i < level; i++)
		answer *= 2;

	return answer;
}

/*
	User input
	string str -- string to output
*/
size_t input(string str)
{
	size_t answer;								// User input

	cout << str;
	cin >> answer;
	if (cin.fail())
		cin.clear();
	cin.ignore(numeric_limits<streamsize>::max(), '\n');
	cout << endl;

	return answer;
}

/*
	Function that changes the values of two tree elements
	int* first -- the first number
	int* second -- the second number
*/
void my_swap(int* first, int* second)
{
	int helper;

	helper = *first;
	*first = *second;
	*second = helper;
}

// A function that delays the program and clears the console
void delay()
{
	system("pause");
	system("cls");
}

//----------------------------------------------------------
// Stack functions
//----------------------------------------------------------

// Stack class constructor
Stack::Stack()
{
	Top = NULL;
}

// Destructor of the Stack class
Stack::~Stack()
{
	while (Top != NULL)
		pop();
}

/*
	Stack_item class constructor
	Stack_item* next -- pointer to next item
	Binary_heap::Node* value -- the value of the information field of the stack member
*/
Stack::Stack_item::Stack_item(Stack_item* next, Node* value)
	: Next(next), Value(value)
{}

/*
	The function that adds an item to the stack
	int value -- the value of the information field of the stack item
*/
void Stack::push(Node* value)
{
	Stack_item* new_item = NULL;				// New item being added to the stack

	if (Top == NULL)
	{
		Top = new Stack_item(NULL, value);
		if (Top == NULL)
			throw std::out_of_range("Memory not allocated.");
	}
	else
	{
		new_item = new Stack_item(Top, value);
		if (new_item == NULL)
			throw std::out_of_range("Memory not allocated.");
		Top = new_item;
	}
}

// Function that returns the top of the stack
Node* Stack::pop()
{
	Stack_item* deleted;						// Excluded stack item
	Node* value;					// Stack item value

	if (Top == NULL)
		throw std::out_of_range("The stack is empty.");

	value = Top->Value;
	deleted = Top;
	Top = Top->Next;
	delete deleted;

	return value;
}

// Function that check the stack for emptiness
bool Stack::is_empty()
{
	bool answer;								// The program's response about the empty list

	if (Top == NULL)
		answer = true;
	else
		answer = false;

	return answer;
}

//----------------------------------------------------------
// Queue functions
//----------------------------------------------------------

// Queue class constructor
Queue::Queue()
{
	Begin = NULL;
	End = NULL;
}

// Destructor of the Stack class
Queue::~Queue()
{
	while (Begin != NULL)
		pop();
	
	End = NULL;
}

/*
	Queue_item class constructor
	Queue_item* next -- pointer to next item
	int value -- the value of the information field of the queue item
*/
Queue::Queue_item::Queue_item(Queue_item* next, Node* value)
	: Next(next), Value(value)
{}

/*
	The function that adds an item to the queue
	int value -- the value of the information field of the queue item
*/
void Queue::push(Node* value)
{
	if (Begin == NULL)
	{
		Begin = new Queue_item(NULL, value);
		if (Begin == NULL)
			throw std::out_of_range("Memory not allocated.");
		End = Begin;
	}
	else
	{
		End->Next = new Queue_item(NULL, value);
		if (End->Next == NULL)
			throw std::out_of_range("Memory not allocated.");
		End = End->Next;
	}
}

// Function that returns the top of the stack
Node* Queue::pop()
{
	Queue_item* deleted;						// Excluded queue item
	Node* value;					// Queue item value

	if (Begin == NULL)
		throw std::out_of_range("The queue is empty.");

	value = Begin->Value;
	deleted = Begin;
	Begin = Begin->Next;
	delete deleted;

	return value;
}

// Function that check the queue for emptiness (if empty -- true, otherwise -- false)
bool Queue::is_empty()
{
	bool answer;								// The program's response about the empty list

	if (Begin == NULL)
		answer = true;
	else
		answer = false;

	return answer;
}
