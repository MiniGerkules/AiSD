#include "CppUnitTest.h"
#include "../lab3_trees/Prototypes.h"
#include <stdexcept>

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace Testlab3trees
{
	TEST_CLASS(Testlab3trees)
	{
	public:
		Binary_heap* heap = NULL;	

		TEST_METHOD_INITIALIZE(setUp)
		{
			heap = new Binary_heap;
		}

		TEST_METHOD_CLEANUP(cleanUp)
		{
			//Freeing memory from the binary heap
			if (heap->address_of_the_root() != NULL)
				heap->tree_clearing(heap->address_of_the_root());

			delete heap;
		}

		TEST_METHOD(create_bft_iterator_test)
		{
			int* function_result;
			int abs_result[32] = { 1, 3, 5, 7, 9, 12, 17, 21, 25, 30, 41, 54, 60, 61, 70, 72, 73, 76, 79, 84, 88, 90, 96, 97,
									98, 99, 100, 102, 107, 110, 115, 134 };
			size_t i;							// For loop parameter

			heap->insert(1);
			heap->insert(3);
			heap->insert(5);
			heap->insert(7);
			heap->insert(9);
			heap->insert(12);
			heap->insert(17);
			heap->insert(21);
			heap->insert(25);
			heap->insert(30);
			heap->insert(41);
			heap->insert(54);
			heap->insert(60);
			heap->insert(61);
			heap->insert(70);
			heap->insert(72);
			heap->insert(73);
			heap->insert(76);
			heap->insert(79);
			heap->insert(84);
			heap->insert(88);
			heap->insert(90);
			heap->insert(96);
			heap->insert(97);
			heap->insert(98);
			heap->insert(99);
			heap->insert(100);
			heap->insert(102);
			heap->insert(107);
			heap->insert(110);
			heap->insert(115);
			heap->insert(134);

			function_result = heap->output_BFT();
			for (i = 0; i < 32; i++)
				Assert::AreEqual(abs_result[i], function_result[i]);
		}

		TEST_METHOD(create_dft_iterator_test)
		{
			int* function_result;
			int abs_result[32] = {1, 3, 7, 21, 72, 134, 73, 25, 76, 79, 9, 30, 84, 88, 41, 90, 96, 5, 12, 54, 97, 98, 60, 99, 
									100, 17, 61, 102, 107, 70, 110, 115 };
			size_t i;							// For loop parameter
			
			heap->insert(1);
			heap->insert(3);
			heap->insert(5);
			heap->insert(7);
			heap->insert(9);
			heap->insert(12);
			heap->insert(17);
			heap->insert(21);
			heap->insert(25);
			heap->insert(30);
			heap->insert(41);
			heap->insert(54);
			heap->insert(60);
			heap->insert(61);
			heap->insert(70);
			heap->insert(72);
			heap->insert(73);
			heap->insert(76);
			heap->insert(79);
			heap->insert(84);
			heap->insert(88);
			heap->insert(90);
			heap->insert(96);
			heap->insert(97);
			heap->insert(98);
			heap->insert(99);
			heap->insert(100);
			heap->insert(102);
			heap->insert(107);
			heap->insert(110);
			heap->insert(115);
			heap->insert(134);

			function_result = heap->output_DFT();
			for (i = 0; i < 32; i++)
				Assert::AreEqual(abs_result[i], function_result[i]);
		}

		TEST_METHOD(address_of_the_root_test)
		{
			heap->insert(134);

			Assert::AreEqual(heap->address_of_the_root()->Key, 134);
		}

		TEST_METHOD(contains_test)
		{
			size_t i;

			for (i = 1; i <= 10; i++)
			{
				heap->insert(i);
				Assert::AreEqual(true, heap->contains(i));
			}
		}

		TEST_METHOD(insert_test)
		{
			heap->insert(134);
			heap->insert(70);
			heap->insert(1);

			Assert::AreEqual(heap->address_of_the_root()->Key, 1);
			Assert::AreEqual(heap->address_of_the_root()->Left->Key, 134);
			Assert::AreEqual(heap->address_of_the_root()->Right->Key, 70);
		}

		TEST_METHOD(remove_test)
		{
			heap->insert(1);
			heap->insert(3);
			heap->insert(5);
			heap->insert(7);
			heap->insert(9);
			heap->insert(12);
			heap->insert(17);

			heap->remove(7);

			Assert::AreEqual(heap->address_of_the_root()->Left->Left->Key, 17);
		}

		TEST_METHOD(search_by_ID_test)
		{
			heap->insert(1);
			heap->insert(3);
			heap->insert(5);
			heap->insert(7);
			heap->insert(9);
			heap->insert(12);
			heap->insert(17);

			Assert::AreEqual(heap->address_of_the_root()->Key, heap->search_by_ID(heap->address_of_the_root(), 0, 0)->Key);
			Assert::AreEqual(heap->address_of_the_root()->Left->Key, heap->search_by_ID(heap->address_of_the_root(), 1, 1)->Key);
			Assert::AreEqual(heap->address_of_the_root()->Right->Key, heap->search_by_ID(heap->address_of_the_root(), 2, 1)->Key);
		}

		TEST_METHOD(search_by_key_test)
		{
			heap->insert(1);
			heap->insert(3);
			heap->insert(5);
			heap->insert(7);
			heap->insert(9);
			heap->insert(12);
			heap->insert(17);

			Assert::AreEqual(heap->address_of_the_root()->Key, heap->search_by_key(heap->address_of_the_root(), 1)->Key);
			Assert::AreEqual(heap->address_of_the_root()->Left->Key, heap->search_by_key(heap->address_of_the_root(), 3)->Key);
			Assert::AreEqual(heap->address_of_the_root()->Right->Key, heap->search_by_key(heap->address_of_the_root(), 5)->Key);
		}

		TEST_METHOD(creator_of_new_elements_test)
		{
			heap->insert(1);

			Assert::AreEqual(heap->address_of_the_root()->Left->Key, INT_MIN);
			Assert::AreEqual(heap->address_of_the_root()->Right->Key, INT_MIN);
		}

		TEST_METHOD(level_identifier_test)
		{
			int result;

			result = level_identifier(5);

			Assert::AreEqual(2, result);
		}

		TEST_METHOD(element_counter_test)
		{
			int result;

			result = element_counter(5);
			Assert::AreEqual(63, result);
		}

		TEST_METHOD(counter_of_unnecessary_items_test)
		{
			int result;

			result = counter_of_unnecessary_items(2);

			Assert::AreEqual(4, result);
		}

		TEST_METHOD(size_of_level_test)
		{
			int result;

			result = size_of_level(4);

			Assert::AreEqual(16, result);
		}

		TEST_METHOD(my_swap_test)
		{
			int a = 5;
			int b = 9;

			my_swap(&a, &b);

			Assert::AreEqual(9, a);
			Assert::AreEqual(5, b);
		}
	};
}
